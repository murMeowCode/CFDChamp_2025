"""–∑–∞–¥–∞—á–∏ –¥–ª—è Celery""" #pylint: disable=E0401, W1203
import logging
import asyncio
from mailing_service.celery_mail import celery_app
from shared.database.database import AsyncSessionLocal
from mailing_service.services.email_service import email_service
from mailing_service.services.message_service import MessageService
from mailing_service.schemas.message import EmailData

logger = logging.getLogger(__name__)

@celery_app.task(bind=True, max_retries=3)
def process_notification_task(self, notification_data: dict):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
    logger.info("üé¨ STARTING Celery task process_notification_task")
    logger.info(f"üì¶ Task ID: {self.request.id}")
    logger.info(f"üìä Notification data keys: {list(notification_data.keys())}")
    logger.info(f"üë§ User ID: {notification_data.get('user_id', 'NOT_FOUND')}")
    logger.info(f"üìß User email: {notification_data.get('user_email', 'NOT_FOUND')}")

    try:
        logger.info("üöÄ Starting async processing with asyncio.run()...")

        # asyncio.run() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç event loop
        result = asyncio.run(_process_notification_async(notification_data))

        logger.info(f"‚úÖ SUCCESS - Notification processed. Message ID: {result}")
        return {"status": "success", "message_id": result}

    except Exception as exc:
        logger.error(f"üí• FAILED - Error in process_notification_task: {exc}")
        logger.exception("Detailed exception traceback:")

        retry_count = self.request.retries
        logger.warning(f"üîÑ Retrying task... (attempt {retry_count + 1}/3)")

        raise self.retry(exc=exc, countdown=30)

async def _process_notification_async(notification_data: dict):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    logger.info("üîÑ STARTING _process_notification_async")

    try:
        logger.info("üîå Creating database session...")
        async with AsyncSessionLocal() as session:
            message_service = MessageService(session)

            logger.info("üíæ Creating message record in database...")
            message_record = await message_service.create_message(
                user_id=notification_data["user_id"],
                subject=notification_data.get("subject", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                content=notification_data.get("content", "")
            )
            logger.info(f"‚úÖ Message record created with ID: {message_record.id}")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è email
            email_data = EmailData(
                to=[notification_data["user_email"]],
                subject=notification_data.get("subject", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                html=notification_data.get("html_content", "")
            )

            logger.info(f"üìß Preparing email to: {email_data.to}")
            logger.info(f"üìù Email subject: {email_data.subject}")

            logger.info("üöÄ Sending email...")
            await email_service.send_email(email_data)
            logger.info("‚úÖ Email sent successfully")

            logger.info(f"üèÅCOMPLETED _process_notification_async,returning ID:{message_record.id}")
            return message_record.id

    except Exception as e:
        logger.error(f"üí• ERROR in _process_notification_async: {e}")
        logger.exception("Detailed async processing exception:")
        raise
