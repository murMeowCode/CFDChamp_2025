"""—Ñ–∞–π–ª–æ–≤–∞—è —Å–ª—É–∂–±–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π""" #pylint: disable=E0401
import json
import uuid
from io import BytesIO
from minio import Minio
from minio.error import S3Error
from fastapi import HTTPException, UploadFile
from shared.config.base import settings

# –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–¥–µ—Å—å
minio_client = Minio(
    endpoint=settings.MINIO_ENDPOINT,
    access_key=settings.MINIO_ACCESS_KEY,
    secret_key=settings.MINIO_SECRET_KEY,
    secure=settings.MINIO_SECURE
)

class FileService:
    """–∫–ª–∞—Å—Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–ª—É–∂–±—ã"""

    @staticmethod
    async def init_minio():
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO buckets –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º bucket –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not minio_client.bucket_exists(settings.MINIO_AVATAR_BUCKET):
                minio_client.make_bucket(settings.MINIO_AVATAR_BUCKET)
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
                policy = {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {"AWS": "*"},
                            "Action": ["s3:GetObject"],
                            "Resource": [f"arn:aws:s3:::{settings.MINIO_AVATAR_BUCKET}/*"]
                        }
                    ]
                }
                minio_client.set_bucket_policy(
                    settings.MINIO_AVATAR_BUCKET,
                    json.dumps(policy)
                )
                print(f"""‚úÖ MinIO bucket '{settings.MINIO_AVATAR_BUCKET}'
                       created with public read access""")
            else:
                print(f"‚úÖ MinIO bucket '{settings.MINIO_AVATAR_BUCKET}' already exists")

        except S3Error as e:
            print(f"‚ùå MinIO initialization error: {e}")
            raise

    @staticmethod
    async def upload_avatar(user_id: uuid.UUID, file: UploadFile) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–π"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_extension = file.filename.split('.')[-1] if '.' in file.filename else 'jpg'
        filename = f"{user_id}/avatar.{file_extension}"  # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∏–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not file.content_type.startswith('image/'):
            raise HTTPException(400, "Only image files are allowed")

        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await FileService.delete_avatar(user_id)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
            contents = await file.read()
            minio_client.put_object(
                bucket_name=settings.MINIO_AVATAR_BUCKET,
                object_name=filename,
                data=BytesIO(contents),
                length=len(contents),
                content_type=file.content_type
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
            avatar_url = await FileService.get_avatar_url(filename)
            return avatar_url

        except S3Error as e:
            raise HTTPException(500, f"Upload failed: {str(e)}")

    @staticmethod
    async def delete_avatar(user_id: uuid.UUID) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            objects = minio_client.list_objects(
                settings.MINIO_AVATAR_BUCKET, 
                prefix=f"{user_id}/"
            )

            deleted = False
            for obj in objects:
                minio_client.remove_object(settings.MINIO_AVATAR_BUCKET, obj.object_name)
                deleted = True
                print(f"üóëÔ∏è Deleted old avatar: {obj.object_name}")

            return deleted
        except S3Error as e:
            print(f"‚ö†Ô∏è Error deleting old avatar: {e}")
            return False

    @staticmethod
    async def get_avatar_url(filename: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL –∞–≤–∞—Ç–∞—Ä–∫–∏"""
        if not filename:
            return None

        try:
            # –î–ª—è MinIO —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π public access –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–π URL
            if settings.MINIO_SECURE:
                return f"""https://{settings.MINIO_ENDPOINT}/
                    {settings.MINIO_AVATAR_BUCKET}/{filename}"""
            
            return f"http://{settings.MINIO_ENDPOINT}/{settings.MINIO_AVATAR_BUCKET}/{filename}"
        except Exception as e:
            print(f"‚ö†Ô∏è Error generating avatar URL: {e}")
            return None

    @staticmethod
    async def get_user_avatar_url(user_id: uuid.UUID) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id"""
        try:
            # –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            objects = minio_client.list_objects(
                settings.MINIO_AVATAR_BUCKET, 
                prefix=f"{user_id}/"
            )

            for obj in objects:
                if obj.object_name.startswith(f"{user_id}/avatar."):
                    return await FileService.get_avatar_url(obj.object_name)
            
            return None
        except S3Error:
            return None

async def get_file_service() -> FileService:
    """–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É–∂–±—ã"""
    file_service = FileService()
    return file_service
