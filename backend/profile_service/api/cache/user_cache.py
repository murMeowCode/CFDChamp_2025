"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
import json
from functools import wraps
from typing import Any, Callable
from shared.utils.redis_client import get_cache_redis


def cache_response(prefix: str, ttl: int = 300) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ API."""
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(*args: Any, **kwargs: Any) -> Any:
            redis = await get_cache_redis()
            cache_key = f"{prefix}:"

            user_id = None

            if func.__name__ == 'get_all_users':
                cache_key += "all"
                print("üè¢ –ö—ç—à –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            elif ('user' in kwargs and isinstance(kwargs['user'], dict) and
                  'user_id' in kwargs['user']):
                user_id = kwargs['user']['user_id']
                cache_key += str(user_id)
                print(f"üîë User_id –Ω–∞–π–¥–µ–Ω –≤ kwargs: {user_id}")

            print(f"üîç –ü–æ–∏—Å–∫ –≤ –∫—ç—à–µ: {cache_key}")

            cached_data = await redis.get(cache_key)
            if cached_data:
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞: {cache_key}")
                try:
                    data = json.loads(cached_data)

                    if isinstance(data, list):
                        print(f"üìã –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫—ç—à–∞")
                    else:
                        print("üìÑ –ü–æ–ª—É—á–µ–Ω –æ–¥–∏–Ω–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ –∫—ç—à–∞")

                    return data
                except json.JSONDecodeError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")
            else:
                print(f"‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ: {cache_key}")

            print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}")
            result = await func(*args, **kwargs)

            try:
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è Pydantic –º–æ–¥–µ–ª–µ–π
                def serialize_model(model):
                    """–°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç Pydantic –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å."""
                    if hasattr(model, 'model_dump'):
                        # Pydantic v2
                        return model.model_dump(mode='json')
                    if hasattr(model, 'dict'):
                        # Pydantic v1
                        return model.dict()
                    return model

                # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if isinstance(result, list):
                    # –î–ª—è —Å–ø–∏—Å–∫–æ–≤
                    serializable_result = [serialize_model(item) for item in result]
                    print(f"üì¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑ {len(serializable_result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫—ç—à")
                else:
                    # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    serializable_result = serialize_model(result)
                    print("üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –∫—ç—à")

                await redis.setex(
                    cache_key,
                    ttl,
                    json.dumps(serializable_result, default=str)
                )
                print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: {cache_key} (TTL: {ttl}—Å–µ–∫)")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à {cache_key}: {e}")

            return result
        return wrapper
    return decorator


async def invalidate_user_cache(user_id: str) -> None:
    """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        redis = await get_cache_redis()
        user_key = f"profile:user:{user_id}"

        deleted_count = await redis.delete(user_key)
        print(f"üóëÔ∏è –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–π: {deleted_count}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def invalidate_all_profiles_cache() -> None:
    """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π."""
    try:
        redis = await get_cache_redis()
        all_users_key = "profile:all"

        deleted_count = await redis.delete(all_users_key)
        print(f"üóëÔ∏è –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∫—ç—à –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π. –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–π: {deleted_count}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")

async def invalidate_pattern_cache(pattern: str) -> None:
    """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É."""
    redis = await get_cache_redis()
    keys = []

    async for key in redis.scan_iter(match=f"*{pattern}*"):
        keys.append(key)

    if keys:
        await redis.delete(*keys)
